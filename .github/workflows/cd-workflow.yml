name: CD

on:
  workflow_run:
    workflows: ["Build and Deploy Custom Image"]
    types:
      - completed

jobs:
  dev-share-ami:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_github_action }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_github_action }}

      - name: Verify AWS CLI
        run: aws s3 ls

      - name: Verify AWS Credentials
        run: aws sts get-caller-identity

      - name: Share AMI with demo
        run: |
          IMAGE_ID=$(
              aws ec2 describe-images \
              --owners $(aws sts get-caller-identity --query Account --output text) \
              --filters "Name=name,Values=csye6225_app*" \
              --query 'Images[*].[ImageId,Name,CreationDate]' \
              --output json | jq -r 'sort_by(.[2]) | last | .[0]'
          )
          
          echo "Latest AMI ID: $IMAGE_ID"
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV
          
          aws ec2 modify-image-attribute \
            --image-id $IMAGE_ID\
            --launch-permission "Add=[{UserId=${{ secrets.AWS_DEMO_ID }}}]"

      - name: Configure AWS CLI for demo user
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_AK_DEMO }}
          aws-secret-access-key: ${{ secrets.AWS_SAK_DEMO }}
          aws-region: us-east-1

      - name: Create new template and update ASG
        run: |
          LT_ID=$(
            aws ec2 describe-launch-templates \
            --region us-east-1 \
            --query 'LaunchTemplates[?starts_with(LaunchTemplateName, `webapp_lt`)].LaunchTemplateId | [0]' \
            --output text
          )
          echo "Launch Template ID: $LT_ID"
          echo "LT_ID=$LT_ID" >> $GITHUB_ENV
          
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id "$LT_ID" \
            --launch-template-data "{\"ImageId\":\"$IMAGE_ID\",${LT_DATA#*\"ImageId\":}}" \
            --version-description "Updated with new AMI ID" \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)
          echo "New Launch Template Version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          ASG_NAME="csye6225_asg"
          echo "ASG_NAME=$ASG_NAME" >> $GITHUB_OUTPUT
          
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name $ASG_NAME \
            --launch-template LaunchTemplateId=$LT_ID,Version='$Latest'
          echo "Auto Scaling Group '$ASG_NAME' has been updated to use Launch Template '$LT_ID'."
          
          
#      - name: Start Instance Refresh
#        run: |
#          REFRESH_ID=$(aws autoscaling start-instance-refresh \
#            --auto-scaling-group-name csye6225_asg\
#            --query 'InstanceRefreshId' \
#            --output text)
#
#          echo "Started Instance Refresh with ID: $REFRESH_ID"
#          echo "REFRESH_ID=$REFRESH_ID" >> $GITHUB_ENV
#
#      - name: Wait for Instance Refresh to Complete
#        run: |
#          REFRESH_STATUS="InProgress"
#
#          while [ "$REFRESH_STATUS" == "InProgress" ]; do
#            REFRESH_STATUS=$(aws autoscaling describe-instance-refreshes \
#              --auto-scaling-group-name csye6225_asg \
#              --instance-refresh-id $REFRESH_ID \
#              --query 'InstanceRefreshes[0].Status' \
#              --output text)
#            echo "Instance Refresh status: $REFRESH_STATUS"
#            sleep 10
#          done
#
#          if [ "$REFRESH_STATUS" == "Successful" ]; then
#            echo "Instance Refresh completed successfully."
#          else
#            echo "Instance Refresh failed with status: $REFRESH_STATUS"
#            exit 1
#          fi

          
